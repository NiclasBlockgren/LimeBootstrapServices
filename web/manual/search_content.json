{
    "pages": [
        {
            "loc": "/", 
            "tags": "", 
            "text": "LIME Bootstrap\nThe LIME Bootstrap is made to make it easier, better and faster working with Actionpads in LIME pro. The framework relies heavily on Knockout.js and Twitter Bootstrap but with custom styling and a simple, yet powerful script called lbs.js. The framework contains several built in functions and third \nparty libraries, but is also expandable through custom apps. \nLIME-bootstrap is only meant to be used inside LIME Pro, but for debugging reasons all functionality (except the data connections) should work in any browser.\nRequirements\n\nInternet Explorer 9 - With some design quirks\nInternet Explorer 10\nInternet Explorer 11\n\nOlder versions of IE won't work!\n\nLIME 10.11 or greater\n\nnote\nOn Lime 10.10 the data from activeinspector can not be trusted and there are some quirks when publishing actionpads.\nInstall\nLIME Bootstrap is included in the LIME Basic database and nothing is needs to be done in this case. If installing LIME Bootstrap from scratch:\n\nCopy all the folders, lbs.html and _config.js to the Actionpad-folder\nCreate two new VBA modules from the VBA found in system/vba/ with the same name as the files\nChange the URL of all Actionpads in LIME Pro to lbs.html\n\nIf you'll like the some basic views to start with you can find some here", 
            "title": "About"
        }, 
        {
            "loc": "#lime-bootstrap", 
            "tags": "", 
            "text": "The LIME Bootstrap is made to make it easier, better and faster working with Actionpads in LIME pro. The framework relies heavily on Knockout.js and Twitter Bootstrap but with custom styling and a simple, yet powerful script called  lbs.js . The framework contains several built in functions and third \nparty libraries, but is also expandable through custom apps.   LIME-bootstrap is only meant to be used inside LIME Pro, but for debugging reasons all functionality (except the data connections) should work in any browser.", 
            "title": "LIME Bootstrap"
        }, 
        {
            "loc": "#requirements", 
            "tags": "", 
            "text": "Internet Explorer 9  - With some design quirks  Internet Explorer 10  Internet Explorer 11   Older versions of IE  won't  work!   LIME 10.11 or greater   note\nOn Lime 10.10 the data from activeinspector can not be trusted and there are some quirks when publishing actionpads.", 
            "title": "Requirements"
        }, 
        {
            "loc": "#install", 
            "tags": "", 
            "text": "LIME Bootstrap is included in the LIME Basic database and nothing is needs to be done in this case. If installing LIME Bootstrap from scratch:   Copy all the folders,  lbs.html  and  _config.js  to the Actionpad-folder  Create two new VBA modules from the VBA found in  system/vba/  with the same name as the files  Change the URL of all Actionpads in LIME Pro to  lbs.html   If you'll like the some basic views to start with you can find some  here", 
            "title": "Install"
        }, 
        {
            "loc": "/philosophy/", 
            "tags": "", 
            "text": "Philosophy\nThe framework is \"opininated and convention over configuration\", meaning there should be one and only one way to do things. If you find yourself writing lots of code to do something, or god forbid, needing to modify ANY file in the systems folder, you're propably doing it wrong. Take a deep breath and ask for assistance.\nIf you want to use the framework I solemnly swear to the following conditions:\n\n\nThe systems folder or lbs.html should never, ever be modified. I can achieve cool and smart functions without ever touching it. \n\n\nI must unlearn what you have learned! The framework offers a completely different methodology of working with ActionPads, I will embrace it. \n\n\nI won't ever copy and paste code from old Actionpads. A rabbit will die if I even think of coping VBScript...\n\n\nI will follow the design guidelines:\n\nThe design should be flat, free from gradients and focused on content.\nThe actionpad is very narrow (~250px), use the height and not the width of the actionpad.\nFont should be dark blue on the default blue background. In any other case, white should be used. It white cannot be used, use a darker variant of the background color i.e dark green on green background\nFont awesome is used for all icons except for the header icons, here we use Icon Experience's new M-icon set.\nStick to default colors, don't \"brand\" the solution with customers logo and colors.\n\n\n\nI won't include any scripts and styles in my views.  \n\n\nI want to contribute to a better framework, any improvements, errors or bugfixes will be committed to this git repository. \n\n\nHappy coding!", 
            "title": "Philosophy"
        }, 
        {
            "loc": "/philosophy#philosophy", 
            "tags": "", 
            "text": "The framework is \"opininated and convention over configuration\", meaning there should be one and only one way to do things. If you find yourself writing lots of code to do something, or god forbid, needing to modify ANY file in the systems folder, you're propably doing it wrong. Take a deep breath and ask for assistance.  If you want to use the framework I solemnly swear to the following conditions:    The systems folder or  lbs.html  should never, ever be modified. I can achieve cool and smart functions without ever touching it.     I must unlearn what you have learned! The framework offers a completely different methodology of working with ActionPads, I will embrace it.     I won't ever copy and paste code from old Actionpads. A rabbit will die if I even think of coping VBScript...    I will follow the design guidelines:   The design should be flat, free from gradients and focused on content.  The actionpad is very narrow (~250px), use the height and not the width of the actionpad.  Font should be dark blue on the default blue background. In any other case, white should be used. It white cannot be used, use a darker variant of the background color i.e dark green on green background  Font awesome is used for all icons except for the header icons, here we use Icon Experience's new M-icon set.  Stick to default colors, don't \"brand\" the solution with customers logo and colors.     I won't include any scripts and styles in my views.      I want to contribute to a better framework, any improvements, errors or bugfixes will be committed to this git repository.     Happy coding!", 
            "title": "Philosophy"
        }, 
        {
            "loc": "/basicUsage/", 
            "tags": "", 
            "text": "Basic usage\nA LIME Bootstrap Actionpad\nAn Actionpad built with LIME Bootstrap has the following structure:\n!-- Header section, The colorfull thing at the top  --\ndiv class=header-container [color] !-- Specify the color of the header. Please see color section for available colors  --\n    div class=header-icon/div  !-- Specify the icon of the header. Please see icon section for available special icons  --\n    h2 data-bind=/h2\n        ul class=info-links         \n            li data-bind= /li\n            ...\n        /ul \n    /div\n/div      \n\n\n!-- /Header section  --\n!-- Body section  --\n\ndiv class=menu !-- Menu  --\n\n\n/div\n\n\n!-- /Body section  --\n\n\n\nComponents\nLIME bootstrap supports all Twitter bootstrap elements but has also a few special elements. Please see the Twitter bootstrap documentation for all cool stuff you have access to.\nThe header section\nThe header section is the colorful header of each actionpad. The following colors are provided:\n\nred\ngreen\nblue\nyellow\norange\ndarkgrey\nwhite\npurple\n\nUsage: \ndiv class=header-container [insert color here]\n\n\nThe menu\nA menu can be created by the following HTML: \n ul class=expandable collapsed\n        li class=menu-headerText/li \n       ...\n/ul\n\n\nA menu has two properties, Expandable and collapsed. The are added in the ul  class:\nul class=\"menu expandable collapsed\"    \nExpandable: The menu can be collapsed by clicking the header \nCollapsed: The menu is collapsed when the actionpad is loaded. Stupid to use without using Expandable...\nDropdown button:\nA dropdown button can contain many options, while taking up very little space. \ndiv class=btn-group btn-group-lime  data-bind=visible:todo.done.value != 1\n    button class=btn btn-lime btn-default dropdown-toggle data-toggle=dropdown data-bind= text:localize.Actionpad_Todo.headermoveforward, icon: 'fa-caret-down'\n    /button\n    ul class=dropdown-menu\n        li data-bind=vba:'ActionPad_todo.Postpone, d, 1', text:localize.Actionpad_Todo.mf1d/li\n        li class=divider/li\n        li data-bind=vba:'ActionPad_todo.Postpone, ww, 1', text:localize.Actionpad_Todo.mf1w/li\n        li data-bind=vba:'ActionPad_todo.Postpone, ww, 2', text:localize.Actionpad_Todo.mf2w/li\n        li class=divider/li\n        li data-bind=vba:'ActionPad_todo.Postpone, m, 1', text:localize.Actionpad_Todo.mf1m/li\n        li data-bind=vba:'ActionPad_todo.Postpone, m, 6', text:localize.Actionpad_Todo.mf6m/li\n        li class=divider/li\n        li data-bind=vba:'ActionPad_todo.Postpone, yyyy, 1', text:localize.Actionpad_Todo.mf1y/li\n    /ul\n/div \n\n\nFunctions and Apps\nAll Twitter bootstrap functions are included, please see the Twitter bootstrap documentation \nLIME Bootstraps allows you to load small components we call apps, as a compliment to Twitter Bootstraps components. Apps can be found here\nTo start an app add this HTML to your view:\n\ndiv data-app={app:'[Name of app]', \n                config:{\n                  [App config]\n            }}\n/div\n\n\n\nEach app has it's own instructions how to start and install them. Some apps require VBA and/or stored procedures to be added.\nBindings\nAs we relay heavily on knockout their data-bind=\"\" syntax is used through out the framework. The data-bind=\"\" syntax is a used as a property on an html element. In a data-bind you add bindings, actions or triggers, to perform actions. All Knockout bindings are available, but also a few custom bindings to make your life easier. \nRead more about bindings and Knockout here and try the tutorial here\nA basic example of use of a knockout binding:\nli data-bind=text:company.name/li `\n\n\nAs default you only have access to the data of the ActiveInspector!\nCustom bindings\nTo make your life easier we have implemented a few custom bindnings.\nList of custom handlers:\n   call: - Tries to call the provided phone number   email: - Tries to email the provided address\n   icon: - Prepends the supplied font awesome icon to the html element   limeLink: - Creates an LIME link from a provided relationship field, for example person.company\n   openURL: - Opens the supplied URL in a external browser   showOnMap: - Opens Google Maps with the supplied data as a search query\n   vba: - Provide an string of an VBA function with it's parameters separated by commas   vbaVisible: - Extends knockouts 'visible:' by executing the supplied Boolean VBA function\nTranslation: Handling multiple languages\nAll available translations from the Localization table are automatically available in the actionpad context. The same language as the logged in user uses is automatically used. The translations are cached in a dictionary to increase speed, but requires you to run ThisApplication.Setup to rebuild the dictionary if you add translations or make changes. \nli data-bind=text:localize.ActionPad_Todo.addTodo/li\n\n\nThe example below uses the versatile knockout binding attr to add a tooltip with localization support. It also uses the custom LIME Bootstrap bindings vba and icon.\nli data-bind=vba:'Actionpad_Person.newComment', text:localize.Actionpad_Person.t_newcomment, icon:'fa-comment', attr: { title: localize.Actionpad_Person.tooltip_newcomment }/li\n\n\nTechnical notes\nThe translations are added to the global view model and are thus available in your apps.\nNote that it is not possible to use localization in the standard way, e.g., localize.Actionpad_Person.t_newcomment within a block where you are using the knockout binding with.\nFetching data from fields in LIME Pro\nAll fields from the ActiveInspector are automagically available for you to use in your view. The syntax is [Record class name].[field database name].[property].\nThe available properties are (in order of relevance):\n   .text \n   .value\n*   .key  - available for set and list fields_\n*   .class__ - available for relation fields \n!-- Company Actionpad showing the name of the company--\nli data-bind=text:company.name.text/li\n!-- Person Actionpad using the id of the company relation as a parameter to a VBA-function. Note the Javascript syntax in the Knockout bindning  --\nli data-bind=vba:'SomeFunction,' + person.company.value/li \n!-- Business Actionpad showing the optionKey from a set-list --\nli data-bind=text:business.businesstatus.key/li \n\n\nGoing beyond the ActiveInspector - Loading additional data\nIt is common to use data from more than the ActiveInspector and the following syntax will NOT work li data-bind=\"text:person.company.phone.text\"/li\nInstead you can load additional data by requesting data sources in _config.js. You'll find more information about this in the advanced section.\nThe loaded data can then be access by: \n!-- Loading person and company info on a helpdesk actionpad--\nli data-bind=text:helpdesk.company.text/li                    \nli data-bind=text:person.phone.text/li\nli data-bind=text:person.mobilephone.text/li                      \nli data-bind=text:company.phone.text/li   \n\n\nHiding or showing elements\nIt is common that some elements only should be visible for certain users or when specific conditions apply. The Data-visibility is used as follows:\nli data-bind=vbaVisible:'ActionPad_Helpdesk.HideLinks, take'/li\n\n\nYou can also use knockouts built in handler visible: to hide or show elements, any valid Javascript will be evaluated. Example:\n!-- Shows an bootstrap alert if the todo is late. Moment.js is used to parse and handle dates.--\ndiv class=alert alert-error data-bind=\n   visible: todo.endtime.value !== null  (moment(todo.endtime.value)  moment()  todo.done.value != 1),\n   text: 'The task is ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' late!',\n   icon:'fa-bell' \n/div\n\n\nA VBA function is called, handling the logic whether the element should be visible or not, returning an boolean. \ntrue: Element is visible \nfalse: Element hidden\nIn complex cases the VBA-function can take input parameters to reduce the number of VBA functions required. \nExecuting VBA-functions and specific actions\nvba: is used to trigger VBA-functions and specific actions on click. To call a VBA function simply use:\nhtml\nli data-bind=\"vba:'ActionPad_Helpdesk.Take'\"/li\nInput parameters are provided by simply separating them by commas.\nhtml\nli data-bind=\"vba:'ActionPad_Helpdesk.Park, 1, t_park_1_hour'\"/li\nYou can also use any available data in the actionpad as an input to the function through concatenating a string  \nhtml\nli data-bind=\"vba:'ActionPad_Helpdesk.DoSomethingWithTheRecord,' + helpdesk.idhelpdesk.value\"/li\nShowing an adress on a map\n\n\nshowOnMap: - Searches Google Maps for the provided address.\nhtml\nli data-bind=\"text:company.postalcity.text, showOnMap: company.fullpostaladdress.text, icon: 'fa-map-marker'\"/li\n\n\nCall a phone number\n\n\ncall: - Ads an tel: link to the HTML wich triggers an built in softphone software.\nhtml\nli data-bind=\"text: company.phone.text, call: company.phone.text, icon: 'fa-phone'\"/li\n\n\nGo to a website\n\n\nopenURL: - Opens the suplied URL in an external browser\nhtml\n li data-bind=\"text:company.www.text, openURL: company.www.text, icon: 'fa-globe'\"/li\n\n\nGo to another LIME Record\n\n\nlimeLink - Tries to create an LIME link to the object provided, please note that the root node of the object is used and not a specific property.\nhtml\nli data-bind=\"text:todo.company.text, limeLink:todo.company, icon:'fa-flag'\"/li\n\n\nSend an email\n\n\nemail - Creates an email. TODO: Should use LIME's built in email factory.\nhtml\nli data-bind=\"text:person.email.text, email:person.email.text, icon:'fa-mail'\"/li\n\n\nWorking with time and dates\nDates are a hassle, except when you have the awesome library Moment.js.\nTo create a iso-date:\nmoment()\nTo parse almost any date format:\nmoment([CRAZY DATE FORMAT])\nMoment even makes time and dates readable to people.\nmoment().timeAgo(2011-01-01) will give you, \"A few years ago\"\nMoment is automagically setup to use the same language and date-format as the language of the LIME Client. \nRemember to use it and check out it further!", 
            "title": "BasicUsage"
        }, 
        {
            "loc": "/basicUsage#basic-usage", 
            "tags": "", 
            "text": "", 
            "title": "Basic usage"
        }, 
        {
            "loc": "/basicUsage#a-lime-bootstrap-actionpad", 
            "tags": "", 
            "text": "An Actionpad built with LIME Bootstrap has the following structure:  !-- Header section, The colorfull thing at the top  --  div class= header-container [color]   !-- Specify the color of the header. Please see color section for available colors  -- \n     div class= header-icon /div    !-- Specify the icon of the header. Please see icon section for available special icons  -- \n     h2 data-bind= /h2 \n         ul class= info-links          \n             li data-bind=   /li \n            ...\n         /ul  \n     /div  /div        !-- /Header section  --  !-- Body section  --  div class= menu   !-- Menu  --  /div  !-- /Body section  --", 
            "title": "A LIME Bootstrap Actionpad"
        }, 
        {
            "loc": "/basicUsage#components", 
            "tags": "", 
            "text": "LIME bootstrap supports all Twitter bootstrap elements but has also a few special elements. Please see the  Twitter bootstrap  documentation for all cool stuff you have access to.  The header section  The header section is the colorful header of each actionpad. The following colors are provided:   red  green  blue  yellow  orange  darkgrey  white  purple   Usage:   div class= header-container [insert color here]   The menu  A menu can be created by the following HTML:     ul class= expandable collapsed \n         li class= menu-header Text /li  \n       ... /ul   A menu has two properties,  Expandable  and  collapsed . The are added in the  ul   class: ul class=\"menu expandable collapsed\"       Expandable:  The menu can be collapsed by clicking the header   Collapsed:  The menu is collapsed when the actionpad is loaded. Stupid to use without using Expandable...  Dropdown button:  A dropdown button can contain many options, while taking up very little space.   div class= btn-group btn-group-lime   data-bind= visible:todo.done.value != 1 \n     button class= btn btn-lime btn-default dropdown-toggle  data-toggle= dropdown  data-bind=  text:localize.Actionpad_Todo.headermoveforward, icon: 'fa-caret-down' \n     /button \n     ul class= dropdown-menu \n         li data-bind= vba:'ActionPad_todo.Postpone, d, 1', text:localize.Actionpad_Todo.mf1d /li \n         li class= divider /li \n         li data-bind= vba:'ActionPad_todo.Postpone, ww, 1', text:localize.Actionpad_Todo.mf1w /li \n         li data-bind= vba:'ActionPad_todo.Postpone, ww, 2', text:localize.Actionpad_Todo.mf2w /li \n         li class= divider /li \n         li data-bind= vba:'ActionPad_todo.Postpone, m, 1', text:localize.Actionpad_Todo.mf1m /li \n         li data-bind= vba:'ActionPad_todo.Postpone, m, 6', text:localize.Actionpad_Todo.mf6m /li \n         li class= divider /li \n         li data-bind= vba:'ActionPad_todo.Postpone, yyyy, 1', text:localize.Actionpad_Todo.mf1y /li \n     /ul  /div", 
            "title": "Components"
        }, 
        {
            "loc": "/basicUsage#functions-and-apps", 
            "tags": "", 
            "text": "All Twitter bootstrap functions are included, please see the  Twitter bootstrap documentation  \nLIME Bootstraps allows you to load small components we call apps, as a compliment to Twitter Bootstraps components. Apps can be found  here  To start an app add this HTML to your view:   div data-app= {app:'[Name of app]', \n                config:{\n                  [App config]\n            }}  /div   Each app has it's own instructions how to start and install them. Some apps require VBA and/or stored procedures to be added.", 
            "title": "Functions and Apps"
        }, 
        {
            "loc": "/basicUsage#bindings", 
            "tags": "", 
            "text": "As we relay heavily on knockout their  data-bind=\"\"  syntax is used through out the framework. The  data-bind=\"\"  syntax is a used as a property on an html element. In a  data-bind  you add  bindings , actions or triggers, to perform actions. All Knockout bindings are available, but also a few custom bindings to make your life easier. \nRead more about bindings and Knockout  here  and try the tutorial  here  A basic example of use of a knockout binding:  li data-bind= text:company.name /li  `  As default you only have access to the data of the ActiveInspector!  Custom bindings  To make your life easier we have implemented a few custom bindnings.\nList of custom handlers:     call:  -  Tries to call the provided phone number     email:  -  Tries to email the provided address      icon:  -  Prepends the supplied font awesome icon to the html element     limeLink:  -  Creates an LIME link from a provided relationship field, for example person.company      openURL:  -  Opens the supplied URL in a external browser     showOnMap:  -  Opens Google Maps with the supplied data as a search query      vba:  -  Provide an string of an VBA function with it's parameters separated by commas     vbaVisible:  -  Extends knockouts 'visible:' by executing the supplied Boolean VBA function  Translation: Handling multiple languages  All available translations from the Localization table are automatically available in the actionpad context. The same language as the logged in user uses is automatically used. The translations are cached in a dictionary to increase speed, but requires you to run  ThisApplication.Setup  to rebuild the dictionary if you add translations or make changes.   li data-bind= text:localize.ActionPad_Todo.addTodo /li   The example below uses the versatile knockout binding  attr  to add a tooltip with localization support. It also uses the custom LIME Bootstrap bindings  vba  and  icon .  li data-bind= vba:'Actionpad_Person.newComment', text:localize.Actionpad_Person.t_newcomment, icon:'fa-comment', attr: { title: localize.Actionpad_Person.tooltip_newcomment } /li   Technical notes  The translations are added to the global view model and are thus available in your apps.  Note that it is not possible to use localization in the standard way, e.g.,  localize.Actionpad_Person.t_newcomment  within a block where you are using the knockout binding  with .  Fetching data from fields in LIME Pro  All fields from the ActiveInspector are automagically available for you to use in your view. The syntax is  [Record class name].[field database name].[property] .  The available properties are (in order of relevance):     .text       .value \n*    .key   -  available for set and list fields_\n*    .class__ -  available for relation fields    !-- Company Actionpad showing the name of the company--  li data-bind= text:company.name.text /li  !-- Person Actionpad using the id of the company relation as a parameter to a VBA-function. Note the Javascript syntax in the Knockout bindning  --  li data-bind= vba:'SomeFunction,' + person.company.value /li   !-- Business Actionpad showing the optionKey from a set-list --  li data-bind= text:business.businesstatus.key /li    Going beyond the ActiveInspector - Loading additional data  It is common to use data from more than the ActiveInspector and the following syntax will NOT work  li data-bind=\"text:person.company.phone.text\" /li  Instead you can load additional data by requesting data sources in  _config.js . You'll find more information about this in the advanced section.  The loaded data can then be access by:   !-- Loading person and company info on a helpdesk actionpad--  li data-bind= text:helpdesk.company.text /li                      li data-bind= text:person.phone.text /li  li data-bind= text:person.mobilephone.text /li                        li data-bind= text:company.phone.text /li      Hiding or showing elements  It is common that some elements only should be visible for certain users or when specific conditions apply. The Data-visibility is used as follows:  li data-bind= vbaVisible:'ActionPad_Helpdesk.HideLinks, take' /li   You can also use knockouts built in handler  visible:  to hide or show elements, any valid Javascript will be evaluated. Example:  !-- Shows an bootstrap alert if the todo is late. Moment.js is used to parse and handle dates.--  div class= alert alert-error  data-bind= \n   visible: todo.endtime.value !== null   (moment(todo.endtime.value)   moment()   todo.done.value != 1),\n   text: 'The task is ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' late!',\n   icon:'fa-bell'    /div   A VBA function is called, handling the logic whether the element should be visible or not, returning an boolean.   true:  Element is visible   false:  Element hidden\nIn complex cases the VBA-function can take input parameters to reduce the number of VBA functions required.   Executing VBA-functions and specific actions  vba:  is used to trigger VBA-functions and specific actions on click. To call a VBA function simply use:  html li data-bind=\"vba:'ActionPad_Helpdesk.Take'\" /li  Input parameters are provided by simply separating them by commas.  html li data-bind=\"vba:'ActionPad_Helpdesk.Park, 1, t_park_1_hour'\" /li  You can also use any available data in the actionpad as an input to the function through concatenating a string    html li data-bind=\"vba:'ActionPad_Helpdesk.DoSomethingWithTheRecord,' + helpdesk.idhelpdesk.value\" /li  Showing an adress on a map    showOnMap:  - Searches Google Maps for the provided address.  html li data-bind=\"text:company.postalcity.text, showOnMap: company.fullpostaladdress.text, icon: 'fa-map-marker'\" /li    Call a phone number    call:  - Ads an tel: link to the HTML wich triggers an built in softphone software.  html li data-bind=\"text: company.phone.text, call: company.phone.text, icon: 'fa-phone'\" /li    Go to a website    openURL:  - Opens the suplied URL in an external browser  html\n  li data-bind=\"text:company.www.text, openURL: company.www.text, icon: 'fa-globe'\" /li    Go to another LIME Record    limeLink  - Tries to create an LIME link to the object provided, please note that the root node of the object is used and not a specific property.  html li data-bind=\"text:todo.company.text, limeLink:todo.company, icon:'fa-flag'\" /li    Send an email    email  - Creates an email. TODO: Should use LIME's built in email factory.  html li data-bind=\"text:person.email.text, email:person.email.text, icon:'fa-mail'\" /li    Working with time and dates  Dates are a hassle, except when you have the awesome library  Moment.js .  To create a iso-date: moment()  To parse almost any date format: moment([CRAZY DATE FORMAT])  Moment even makes time and dates readable to people. moment().timeAgo(2011-01-01)  will give you, \"A few years ago\"  Moment is automagically setup to use the same language and date-format as the language of the LIME Client. \nRemember to use it and check out it further!", 
            "title": "Bindings"
        }, 
        {
            "loc": "/advanced/", 
            "tags": "", 
            "text": "Advanced\nHow does it work?\nThe new Actionpads are inspired of how a single page application work. Views (basically html-templates) and data(usually JSON) are loaded via AJAX (an asyncrounous javacript call) by the the web application. The template is then rendered by applying the data and the result is shown to the user.\nIn LIME-bootstraps case lbs.html and lbs.js constitute the main application and all Actionpads set to show lbs.html. For simplification we'll call the framework just LBS (LIME Bootstrap). lbs.html contians all included CSS, JS and meta tags. The Actionpads (for example company.html) are now just views, containing no included CSS or JS.\nlbs.html will detemine which view to load either by a supplied query string (the thing after the questionmark), ../lbs.html?ap=company or if nothing is supplied, by trying to load a view with the same name as the class of the LIME inspector.\nThe active inspectors record is then loaded as data and converted to JSON.\nBasic flow in LBS:\n1.  LBS starts and includes all base CSS, Javascript and sets a lot of environment variables, such as skin color, language.\n2.  LBS then checks where you want your display your HTML-view. In LIME you can show HTML in the Actionpad, in a field, in a tab or in a web dialog. If you don't specify anything lbs will assume your building an Actionpad.\n3.  The specified view, html-file, is loaded\n4.  Data is loaded. LBS will first check _config.js for datasources, specified with the name of the view. If no datasources are found LBS will try to load the data from the ActiveInspector. A dictionary of local languages translations is loaded. All data is supplied as a JSON-object and then converted to a knockout viewmodel-\n5.  Apps are discovered, started and their data is loaded into the main viewmodel. A app can specify depencies on other libraries or styles. These are dynamically loaded and checked for duplicates.\n6.  The viewmodel is applied to the now complete view and rendered.\nLoading views\nAs metioned lbs.html is the real engine and all HTML things should be loaded trough lbs.html. This is achieved by supplying a querystring\n[URL to Actionpad folder]/lbs.html?ap=[path to your view/view name]\nThe path is relative the lbs.html file and you should not include the file extension (.html).\nLoading the company Actionpad (company.html):\nlbs.html?ap=company\nThe console and debugging your applications\nThe framework has been blessed with a virtual console, to use for debugging. It is activated through changing setDebug(true) in _config.html. The console will allways automagically appeare if a critical error is logged. If you make syntacic errors in the wrong place, even the viritual console will crash. You can easily use the console when building apps, read more abot this in the app readme. The console is limited to 30 messages by default.\nWhen working with more advanced stuff you might like to have access to a real console. Modern browsers won't allow dynamically loadings scripts from the local file system, due to security concerns. Dynamically loading scripts and html views are core concepts in LBS. In LIME a small VBA function acts as the loader. However in system/bin/ you will find a .bat-file which will restart Google Chrome in a debug mode, allowing you to inspect the CSS and JS. If you dislike this approach a small HTTP-server will do the trick. With Python3 just go to the actionpad folder and write this in your terminal:\n$python -m http.server\n\n\nDifferent wrappers\nIn LIME HTML can be displayed in the actionpad, in a HTML-field, in a HTML-tab and in a HTML-dialog. Theses places are quite different and requires some basic setup to work well. Your view can thus be loaded into three different wrappers for helping you with the different conditions.\nThe three basic wrappers of content:\n   Actionpad-wrapper. A thin and long wrapper with a slightly lighter background images with a sharp edge to teh rest of the content:\n   Inline-wrapper. Used for HTML-fields. Completely plain, with the same color as the Inspector and no padding or margin. Built to seamlessly look as a part of the inspector.\n*   Tab-wrapper. Used for wider layouts, such as a tab or a dialog. Uses default Twitter Bootstrap margins and is fully responsive.\nThe Actionpad wrapper is allways used unless anything else is stated. Pick your wrapper by suppling a querystring to lbs.html\nInline:_ lbs.html?type=inline\nTab: lbs.html?type=tab\nWhen working with tabs, fields or dialogs it is easiest to use VBA to set the URL. Example:\n    ActiveInspector.Controls.SetValue(htmlfield, WebFolder  lbs.html?ap=footype=inline)\n\n\nData sources\nA core concept in LIME Bootstrap is data sources. A data source is just what it sounds like, a source of data. The source can be many things, like a LIME Inspector, a REST web-service, a stored procedure or a VBA function. Data sources are used both while working with basic views and especially when working with apps. The available data sources are:\n\nactiveInspector: Fetch data from the ActiveInspector. {type:'activeInspector'}\nxml: Execute specified VBA-function which must return a XML as string. {type:'xml',source:'[Name of VBA-function]' }\nrecord: Execute specified VBA-function which must return a Record object. {type:'record',source:'[Name of VBA-function]' }\nrecords: Execute specified VBA-function which must return a Records object. {type:'records',source:'[Name of VBA-function]' }\nlocalization: Loads all translations in the current LIME language. {localization:'records' }\nstoredProcedure: Execute specified stored procedure which must be set to \"as xml\". {type:'storedProcedure',source:'[Name of stored procedure]' }\nHTTPGetXml: Calls a web-service and expects a xml response.   {type:'HTTPGetXml',source:'[URL]' }\nSOAPGetXml: Calls a SOAP web-service.  {type:'SOAPGetXml',source:{url:[URL], action:[SOAP action as xml string], xml:[SOAP request xml]} }\nrelatedRecord: Loads a record based on id and class. Used to load related data to an inspector. {type:'relatedRecord',class:[name of class], idrecord:[Id of record] }\n\nA data source can also take a parameter \"alias\", which lets you specify a name for the data source in viewModel.\nExamples:\n\n dataSources: \n        [\n            {type: 'activeInspector'}, \n            {type: 'localization'},\n            {type: 'record', source: 'ActionPadTools.GetCompanyContactData'}, \n            {type: 'storedProcedure', source: ''}\n        ],\n        autorefresh : false\n\n\n\nNote that autorefresh isn't implemented yet!\nSettings and loading more data - _config.js\nFor loading additional data or enabling the debug mode you have a file called _config.js.\nExample:\n/**\nEnable or disable the debug console \nfor the whole application\n**/\nlbs.setDebug(true);\n\n/**\nConfigure special use cases,\nmainly when requiring additional data sources\n**/\n\nlbs.configure({\n    'index' : { // -- name of view\n        dataSources: [\n             { type: 'localization', source: '' },\n        ],\n        autorefresh : false\n    }\n})\n\n\nLogic in bindnings\nKnockout lets you write JavaScript expressions directly in the bindnings. This is a really simple and powerful way of doing cool stuff. Word of advice: Too much logic in the view isn't nice at all. If you need to do a little more advanced stuff, build an app!\nExample:\n\ndiv class=alert alert-warning fullwidth data-bind=\n    visible: todo.endtime.value !== null  (moment(todo.endtime.value)  moment()  todo.done.value != 1),\n    text: 'Uppgiften \u00e4r ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' f\u00f6rsenad!', \n    icon:'fa-bell' \n/div\n\n\n\nPlease note that you can but the bindings on separate rows to increase readability", 
            "title": "Advanced"
        }, 
        {
            "loc": "/advanced#advanced", 
            "tags": "", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "loc": "/advanced#how-does-it-work", 
            "tags": "", 
            "text": "The new Actionpads are inspired of how a single page application work. Views (basically html-templates) and data(usually JSON) are loaded via AJAX (an asyncrounous javacript call) by the the web application. The template is then rendered by applying the data and the result is shown to the user.  In LIME-bootstraps case lbs.html and lbs.js constitute the main application and all Actionpads set to show  lbs.html . For simplification we'll call the framework just  LBS  (LIME Bootstrap).  lbs.html  contians all included CSS, JS and meta tags. The Actionpads (for example company.html) are now just views, containing no included CSS or JS.\nlbs.html will detemine which view to load either by a supplied query string (the thing after the questionmark),  ../lbs.html?ap=company  or if nothing is supplied, by trying to load a view with the same name as the class of the LIME inspector.  The active inspectors record is then loaded as data and converted to JSON.  Basic flow in LBS:\n1.  LBS starts and includes all base CSS, Javascript and sets a lot of environment variables, such as skin color, language.\n2.  LBS then checks where you want your display your HTML-view. In LIME you can show HTML in the Actionpad, in a field, in a tab or in a web dialog. If you don't specify anything lbs will assume your building an Actionpad.\n3.  The specified view, html-file, is loaded\n4.  Data is loaded. LBS will first check  _config.js  for datasources, specified with the name of the view. If no datasources are found LBS will try to load the data from the  ActiveInspector . A dictionary of local languages translations is loaded. All data is supplied as a JSON-object and then converted to a knockout viewmodel-\n5.  Apps are discovered, started and their data is loaded into the main viewmodel. A app can specify depencies on other libraries or styles. These are dynamically loaded and checked for duplicates.\n6.  The viewmodel is applied to the now complete view and rendered.", 
            "title": "How does it work?"
        }, 
        {
            "loc": "/advanced#loading-views", 
            "tags": "", 
            "text": "As metioned lbs.html is the real engine and all HTML things should be loaded trough lbs.html. This is achieved by supplying a querystring  [URL to Actionpad folder]/lbs.html?ap=[path to your view/view name]  The path is relative the lbs.html file and you should not include the file extension (.html).  Loading the company Actionpad (company.html):  lbs.html?ap=company", 
            "title": "Loading views"
        }, 
        {
            "loc": "/advanced#the-console-and-debugging-your-applications", 
            "tags": "", 
            "text": "The framework has been blessed with a virtual console, to use for debugging. It is activated through changing  setDebug(true)  in  _config.html . The console will allways automagically appeare if a critical error is logged. If you make syntacic errors in the wrong place, even the viritual console will crash. You can easily use the console when building apps, read more abot this in the app readme. The console is limited to 30 messages by default.  When working with more advanced stuff you might like to have access to a real console. Modern browsers won't allow dynamically loadings scripts from the local file system, due to security concerns. Dynamically loading scripts and html views are core concepts in LBS. In LIME a small VBA function acts as the loader. However in  system/bin/  you will find a  .bat-file  which will restart Google Chrome in a debug mode, allowing you to inspect the CSS and JS. If you dislike this approach a small HTTP-server will do the trick. With Python3 just go to the actionpad folder and write this in your terminal:  $python -m http.server", 
            "title": "The console and debugging your applications"
        }, 
        {
            "loc": "/advanced#different-wrappers", 
            "tags": "", 
            "text": "In LIME HTML can be displayed in the actionpad, in a HTML-field, in a HTML-tab and in a HTML-dialog. Theses places are quite different and requires some basic setup to work well. Your view can thus be loaded into three different wrappers for helping you with the different conditions.  The three basic wrappers of content:    Actionpad-wrapper. A thin and long wrapper with a slightly lighter background images with a sharp edge to teh rest of the content:    Inline-wrapper. Used for HTML-fields. Completely plain, with the same color as the Inspector and no padding or margin. Built to seamlessly look as a part of the inspector.\n*   Tab-wrapper. Used for wider layouts, such as a tab or a dialog. Uses default Twitter Bootstrap margins and is fully responsive.  The Actionpad wrapper is allways used unless anything else is stated. Pick your wrapper by suppling a querystring to lbs.html  Inline: _  lbs.html?type=inline  Tab:   lbs.html?type=tab  When working with tabs, fields or dialogs it is easiest to use VBA to set the URL. Example:      ActiveInspector.Controls.SetValue( htmlfield , WebFolder    lbs.html?ap=foo type=inline )", 
            "title": "Different wrappers"
        }, 
        {
            "loc": "/advanced#data-sources", 
            "tags": "", 
            "text": "A core concept in LIME Bootstrap is data sources. A data source is just what it sounds like, a source of data. The source can be many things, like a LIME Inspector, a REST web-service, a stored procedure or a VBA function. Data sources are used both while working with basic views and especially when working with apps. The available data sources are:   activeInspector:  Fetch data from the ActiveInspector.  {type:'activeInspector'}  xml:  Execute specified VBA-function which must return a XML as string.  {type:'xml',source:'[Name of VBA-function]' }  record:  Execute specified VBA-function which must return a Record object.  {type:'record',source:'[Name of VBA-function]' }  records:  Execute specified VBA-function which must return a Records object.  {type:'records',source:'[Name of VBA-function]' }  localization:  Loads all translations in the current LIME language.  {localization:'records' }  storedProcedure:  Execute specified stored procedure which must be set to \"as xml\".  {type:'storedProcedure',source:'[Name of stored procedure]' }  HTTPGetXml:  Calls a web-service and expects a xml response.    {type:'HTTPGetXml',source:'[URL]' }  SOAPGetXml:  Calls a SOAP web-service.   {type:'SOAPGetXml',source:{url:[URL], action:[SOAP action as xml string], xml:[SOAP request xml]} }  relatedRecord:  Loads a record based on id and class. Used to load related data to an inspector.  {type:'relatedRecord',class:[name of class], idrecord:[Id of record] }   A data source can also take a parameter \"alias\", which lets you specify a name for the data source in viewModel.  Examples:  \n dataSources: \n        [\n            {type: 'activeInspector'}, \n            {type: 'localization'},\n            {type: 'record', source: 'ActionPadTools.GetCompanyContactData'}, \n            {type: 'storedProcedure', source: ''}\n        ],\n        autorefresh : false  Note that autorefresh isn't implemented yet!", 
            "title": "Data sources"
        }, 
        {
            "loc": "/advanced#settings-and-loading-more-data-_configjs", 
            "tags": "", 
            "text": "For loading additional data or enabling the debug mode you have a file called  _config.js .  Example:  /**\nEnable or disable the debug console \nfor the whole application\n**/\nlbs.setDebug(true);\n\n/**\nConfigure special use cases,\nmainly when requiring additional data sources\n**/\n\nlbs.configure({\n    'index' : { //  -- name of view\n        dataSources: [\n             { type: 'localization', source: '' },\n        ],\n        autorefresh : false\n    }\n})", 
            "title": "Settings and loading more data - _config.js"
        }, 
        {
            "loc": "/advanced#logic-in-bindnings", 
            "tags": "", 
            "text": "Knockout lets you write JavaScript expressions directly in the bindnings. This is a really simple and powerful way of doing cool stuff. Word of advice: Too much logic in the view isn't nice at all. If you need to do a little more advanced stuff, build an app!  Example:   div class= alert alert-warning fullwidth  data-bind= \n    visible: todo.endtime.value !== null   (moment(todo.endtime.value)   moment()   todo.done.value != 1),\n    text: 'Uppgiften \u00e4r ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' f\u00f6rsenad!', \n    icon:'fa-bell'    /div   Please note that you can but the bindings on separate rows to increase readability", 
            "title": "Logic in bindnings"
        }, 
        {
            "loc": "/buildingApps/", 
            "tags": "", 
            "text": "Building apps\nBasics\nApps are small standalone tools, used for customer customisations. They are loaded dynamically and added only through a single line of HTML in the Actionpad. The business logic and dataconnection is allways performed by the VBA. This functionallity should be inside a single module. \nThe general idea of an app is to implement:\n\nA function or procedure to deliver data. VBA or SQL, can deliver data as xml, record or records.\nA view - An html template with the structure of your app.\nA view-model - the viewmodel holds a rednering and frontend logic\n\nAn app is initilaized as:\n1. The app is loaded and the config of the app is parsed\n2. Data is loaded from LIME Pro, from your supplied function\n3. The data is converted to a view-model (In this case the view model is just a JSON represenation of the data)\n4. Additional resources are loaded to the app\n5. The view-model is supplied to the app and cam be modified\n6. The app view is loaded from app.html.\n7. The view and view-model is rendered and injected to the actionpad \nInitiation of an app is executed by the lbs.apploader.js module and triggered by an data-app:-attribute.\nThe data can be provided as XML, record or records and limebootstrap will then supply the app with an View-model based on the data, free for you to work with. In the view model you will also find all translations and avilable data from the current actionpad viewmodel.   \ndiv data-app=app:'checklist',config:{canBeUnchecked:true,allowRemove:true, canAddTask:true}}  /div\n\n\nPlease note that you can not have a data-app and data-bind attribute in the same element\nThe javascript app structure\nlbs.apploader.register('template', function () { //Insert name of app here\n    var self = this;\n\n    //config\n    this.config = {\n        dataSources: [ //Either provide your data source here, or let the user of your app supplie it\n\n        ],\n        resources: { //Add any extra resources that should be loadad. The paths are realtive your app folder, exept libs which are loaded from system/js/\n            scripts: [],\n            styles: ['app.css'],\n            libs: ['json2xml.js']\n        }\n    },\n\n    //initialize\n    this.initialize = function (node, viewModel) {\n\n        //Use this method to setup you app. \n        //\n        //The data you requested along with activeInspector are delivered in the variable viewModel.\n        //You may make any modifications you please to it or replace is with a entirely new one before returning it.\n        //The returned viewmodel will be used to build your app.\n\n\n        return viewModel;\n    }\n\n\n\nObject definitions\nDataSouce\n{type: '', source: '', alias:''}\nLimeVersion\n\n\n\nParameter\nType\nComment\n\n\n\n\ncomparable\nint\n\n\n\nfull\nstring\n\n\n\nmajor\nint\n\n\n\nminor\nint\n\n\n\nbuild\nint\n\n\n\n\nLibrary attributes\n\n\n\nParameter\nType\nComment\n\n\n\n\nlbs.debug\nint\nif debug modes has been triggered\n\n\nlbs.limeVersion\nLimeVersion\n\n\n\nlbs.limeDataConnection\nobject\nreference to window.external\n\n\nlbs.hasLimeConnection\nboolean\nhas reference to lime?\n\n\nlbs.activeClass\nstring\n\n\n\nlbs.activeDatabase\nstring\n\n\n\nlbs.activeServer\nstring\n\n\n\nlbs.common.iconTemplate\nstring\ntemplate for icon html\n\n\n\nLibrary helper functions\nlbs.heper.loadDataSorces()\nLoads multiple datasources into a JSON objekt\nSyntax\nlbs.heper.loadDataSorces(viewModel, DataSources, [override])\nParameters\n\n\n\nParameters\nType\nComment\n\n\n\n\nviewModel\narray\nobject to assign values to\n\n\nDataSources\nArray\nsources\n\n\nOverride\nboolean\nif duplicate values should be overriden or thrown away\n\n\n\nlbs.heper.loadDataSorce()\nLoads a datasources into a JSON objekt\nSyntax\nlbs.heper.loadDataSorce(viewModel, DataSource, [override])\nParameters\n\n\n\nParameters\nType\nComment\n\n\n\n\nviewModel\narray\nobject to assign values to\n\n\nDataSource\nDataSouce\nsource\n\n\nOverride\nboolean\nif duplicate values should be overriden or thrown away\n\n\n\nlbs.common.getErrorText()\nReturnes a funny error adjective :)\nSyntax\nlbs.common.getErrorText()\nReturn\nstring\nlbs.common.escapeHtml()\nEscape html\nSyntax\nlbs.common.escapeHtml(html)\nParameters\n\n\n\nParameters\nType\n\n\n\n\nhtml\nstring\n\n\n###### Return\n\n\n\nstring\n\n\n\n\nlbs.common.createLimeLink()\nCreate limelink\nSyntax\nlbs.common.createLimeLink(class,id)\nParameters\n\n\n\nParameters\nType\n\n\n\n\nclass\nstring\n\n\nid\nint\n\n\n###### Return\n\n\n\nstring\n\n\n\n\nlbs.common.getURLParameter()\nExtract URL parameter from GET variable\nSyntax\nlbs.common.getURLParameter(name)\nParameters\n\n\n\nParameters\nType\n\n\n\n\nname\nstring\n\n\n###### Return\n\n\n\nstring\n\n\n\n\nlbs.common.executeVba()\nExecute VBA code, same as old VBA.run()\nSyntax\nlbs.common.executeVba(proc,params)\nParameters\n\n\n\nParameters\nType\n\n\n\n\nproc\nstring\n\n\nparams\nstring\n\n\n###### Return\n\n\n\nstring\n\n\n\n\nlbs.common.nl2br\nreplace nl chars with html rowbreaks\nSyntax\nlbs.common.nl2br(data)\nParameters\n\n\n\nParameters\nType\n\n\n\n\ndata\nstring\n\n\n##### Return\n\n\n\nstring\n\n\n\n\nstring.format()\nImplementation of c# String.Format()\nSyntax\nstring.format(format,var1,[var2])\nParameters\n\n\n\nParameters\nType\n\n\n\n\nformat\nstring\n\n\nvar\nreplacement varibles\n\n\n##### Return\n\n\n\nstring\n\n\n\n\nlbs.log.debug\nLog message at debug level\nSyntax\nlbs.log.debug(msg)\nParameters\n\n\n\nParameters\nType\n\n\n\n\nmsg\nmessage\n\n\n\nlbs.log.debug\nLog message at info level\nSyntax\nlbs.log.info(msg)\nParameters\n\n\n\nParameters\nType\n\n\n\n\nmsg\nmessage\n\n\n\nlbs.log.warn\nLog message at warn level\nSyntax\nlbs.log.warn(msg, [e])\nParameters\n\n\n\nParameters\nType\n\n\n\n\nmsg\nmessage\n\n\ne\nExecption (optional)\n\n\n\nlbs.log.error\nLog message at error level\nSyntax\nlbs.log.error(msg, [e])\nParameters\n\n\n\nParameters\nType\n\n\n\n\n\nmsg\nmessage\n\n\n\ne\nExecption (optional)", 
            "title": "BuildingApps"
        }, 
        {
            "loc": "/buildingApps#building-apps", 
            "tags": "", 
            "text": "", 
            "title": "Building apps"
        }, 
        {
            "loc": "/buildingApps#basics", 
            "tags": "", 
            "text": "Apps are small standalone tools, used for customer customisations. They are loaded dynamically and added only through a single line of HTML in the Actionpad. The business logic and dataconnection is allways performed by the VBA. This functionallity should be inside a single module.   The general idea of an app is to implement:   A function or procedure to deliver data. VBA or SQL, can deliver data as xml, record or records.  A view - An html template with the structure of your app.  A view-model - the viewmodel holds a rednering and frontend logic   An app is initilaized as:\n1. The app is loaded and the config of the app is parsed\n2. Data is loaded from LIME Pro, from your supplied function\n3. The data is converted to a view-model (In this case the view model is just a JSON represenation of the data)\n4. Additional resources are loaded to the app\n5. The view-model is supplied to the app and cam be modified\n6. The app view is loaded from app.html.\n7. The view and view-model is rendered and injected to the actionpad   Initiation of an app is executed by the  lbs.apploader.js  module and triggered by an  data-app: -attribute.  The data can be provided as XML, record or records and limebootstrap will then supply the app with an View-model based on the data, free for you to work with. In the view model you will also find all translations and avilable data from the current actionpad viewmodel.     div data-app= app:'checklist',config:{canBeUnchecked:true,allowRemove:true, canAddTask:true}}    /div   Please note that you can not have a  data-app  and  data-bind  attribute in the same element  The javascript app structure  lbs.apploader.register('template', function () { //Insert name of app here\n    var self = this;\n\n    //config\n    this.config = {\n        dataSources: [ //Either provide your data source here, or let the user of your app supplie it\n\n        ],\n        resources: { //Add any extra resources that should be loadad. The paths are realtive your app folder, exept libs which are loaded from system/js/\n            scripts: [],\n            styles: ['app.css'],\n            libs: ['json2xml.js']\n        }\n    },\n\n    //initialize\n    this.initialize = function (node, viewModel) {\n\n        //Use this method to setup you app. \n        //\n        //The data you requested along with activeInspector are delivered in the variable viewModel.\n        //You may make any modifications you please to it or replace is with a entirely new one before returning it.\n        //The returned viewmodel will be used to build your app.\n\n\n        return viewModel;\n    }  Object definitions  DataSouce  {type: '', source: '', alias:''}  LimeVersion     Parameter  Type  Comment      comparable  int     full  string     major  int     minor  int     build  int      Library attributes     Parameter  Type  Comment      lbs.debug  int  if debug modes has been triggered    lbs.limeVersion  LimeVersion     lbs.limeDataConnection  object  reference to window.external    lbs.hasLimeConnection  boolean  has reference to lime?    lbs.activeClass  string     lbs.activeDatabase  string     lbs.activeServer  string     lbs.common.iconTemplate  string  template for icon html     Library helper functions  lbs.heper.loadDataSorces()  Loads multiple datasources into a JSON objekt  Syntax  lbs.heper.loadDataSorces(viewModel, DataSources, [override])  Parameters     Parameters  Type  Comment      viewModel  array  object to assign values to    DataSources  Array  sources    Override  boolean  if duplicate values should be overriden or thrown away     lbs.heper.loadDataSorce()  Loads a datasources into a JSON objekt  Syntax  lbs.heper.loadDataSorce(viewModel, DataSource, [override])  Parameters     Parameters  Type  Comment      viewModel  array  object to assign values to    DataSource  DataSouce  source    Override  boolean  if duplicate values should be overriden or thrown away     lbs.common.getErrorText()  Returnes a funny error adjective :)  Syntax  lbs.common.getErrorText()  Return  string  lbs.common.escapeHtml()  Escape html  Syntax  lbs.common.escapeHtml(html)  Parameters     Parameters  Type      html  string    ###### Return     string      lbs.common.createLimeLink()  Create limelink  Syntax  lbs.common.createLimeLink(class,id)  Parameters     Parameters  Type      class  string    id  int    ###### Return     string      lbs.common.getURLParameter()  Extract URL parameter from GET variable  Syntax  lbs.common.getURLParameter(name)  Parameters     Parameters  Type      name  string    ###### Return     string      lbs.common.executeVba()  Execute VBA code, same as old VBA.run()  Syntax  lbs.common.executeVba(proc,params)  Parameters     Parameters  Type      proc  string    params  string    ###### Return     string      lbs.common.nl2br  replace nl chars with html rowbreaks  Syntax  lbs.common.nl2br(data)  Parameters     Parameters  Type      data  string    ##### Return     string      string.format()  Implementation of c# String.Format()  Syntax  string.format(format,var1,[var2])  Parameters     Parameters  Type      format  string    var  replacement varibles    ##### Return     string      lbs.log.debug  Log message at debug level  Syntax  lbs.log.debug(msg)  Parameters     Parameters  Type      msg  message     lbs.log.debug  Log message at info level  Syntax  lbs.log.info(msg)  Parameters     Parameters  Type      msg  message     lbs.log.warn  Log message at warn level  Syntax  lbs.log.warn(msg, [e])  Parameters     Parameters  Type      msg  message    e  Execption (optional)     lbs.log.error  Log message at error level  Syntax  lbs.log.error(msg, [e])  Parameters     Parameters  Type       msg  message     e  Execption (optional)", 
            "title": "Basics"
        }, 
        {
            "loc": "/changelog/", 
            "tags": "", 
            "text": "Changelog\nUpdates\nWe continually relase new versions of LIME Bootstrap. From version 0.7 the framework automafically checks for new versions only and notifys you if updates are avialable. Please install them ;)\nUpgrade instructions\nJust replace the system-folder and lbs.html and you are good to go, unless specified otherwise in the changelog\nChangelog\n1.1\n\nBugfix: Handeling of _config.js now works in IE9 \nBugfix: Index-view won't cause an ugly error any more\nBugfix: Checking for updates should work better\n\n1.0\n\nThe big 1.0 release! untz untz untz\nNOTE: Format of _config.js has changed and the file must be replaced! If you are upgrading and you have modified the file, look at the new format and apply your changed accordingly. Should be a 10 second fix.\nApps now auto-magically check their versions compared to the latest version available on the appstore. If a newer (and always better) version has been released you can directly downloaded and install it with three clicks and one copy-paste. \nNew dataSources are available. Most exciting is 'AsyncPost' which combined with a proxy server for LIME WebService can fetch data without LIME freezing. Great job FredrikL!\n\n0.9\n\nNow in Twitter Bootstrap 3.1. \nHandling of inline and tab views have been improved\n\n0.8\nBugs have been eaten!\n0.7\n\nAdded version checking. If debug is turned on the version of the installed framework is compared with the current version on GitHub. The user is notified and can download a new version.\nAdded a method to the VBA method \"lbsHelper\". If upgrading, replace old version with new.\n\n0.6\n\nAdded support for insepctorId param in 10.11\nAdded global config, removed inline config\nInline config entries in \"comment-style\" should be moved to _config.js \n\n0.5\n\nBugfix: The styling of the menu hover-effekt is imporoved\nBugfix: Header icon is now properly aligned \n\n0.4\n\nSkins are now supported! Actionpads must be reloaded to apply the skin change.\n\n0.3\n\nUpdated to font awesome 4.0. All icon bindings must be changed to handel the new \"fa-\" naming convention\nUpdated to Twitter Bootstrap 3.0\n.nav-header should be change to .menu-header\n.menu property \"hidden\" should be changed to \"collapsed\"\n\n0.2\n\nReplace header tag div class=\"header-fa-container helpdesk\" with div class=\"header-icon\"/div. The image to show will sort itself out.\nPlace any images you may need in the root folder \"resources\" or a subdirectory of it\nInvoke old-school apps with the binding \"appInvoke\"\nRemove div with id #header-info and add class .info-links to the list of info links in the header\nRemove div with id #content-container", 
            "title": "Changelog"
        }, 
        {
            "loc": "/changelog#changelog", 
            "tags": "", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "loc": "/changelog#updates", 
            "tags": "", 
            "text": "We continually relase new versions of LIME Bootstrap. From version 0.7 the framework automafically checks for new versions only and notifys you if updates are avialable. Please install them ;)", 
            "title": "Updates"
        }, 
        {
            "loc": "/changelog#upgrade-instructions", 
            "tags": "", 
            "text": "Just replace the  system -folder and  lbs.html  and you are good to go, unless specified otherwise in the changelog", 
            "title": "Upgrade instructions"
        }, 
        {
            "loc": "/changelog#changelog_1", 
            "tags": "", 
            "text": "1.1   Bugfix: Handeling of  _config.js  now works in IE9   Bugfix: Index-view won't cause an ugly error any more  Bugfix: Checking for updates should work better   1.0   The big 1.0 release!  untz   untz   untz  NOTE:  Format of  _config.js  has changed and the file must be replaced! If you are upgrading and you have modified the file, look at the new format and apply your changed accordingly. Should be a 10 second fix.  Apps now auto-magically check their versions compared to the latest version available on the appstore. If a newer (and always better) version has been released you can directly downloaded and install it with three clicks and one copy-paste.   New dataSources are available. Most exciting is 'AsyncPost' which combined with a  proxy server  for LIME WebService can fetch data without LIME freezing. Great job  FredrikL!   0.9   Now in Twitter Bootstrap 3.1.   Handling of inline and tab views have been improved   0.8  Bugs have been eaten!  0.7   Added version checking. If debug is turned on the version of the installed framework is compared with the current version on GitHub. The user is notified and can download a new version.  Added a method to the VBA method \"lbsHelper\". If upgrading, replace old version with new.   0.6   Added support for insepctorId param in 10.11  Added global config, removed inline config  Inline config entries in \"comment-style\" should be moved to _config.js    0.5   Bugfix: The styling of the menu hover-effekt is imporoved  Bugfix: Header icon is now properly aligned    0.4   Skins are now supported! Actionpads must be reloaded to apply the skin change.   0.3   Updated to font awesome 4.0. All icon bindings must be changed to handel the new \"fa-\" naming convention  Updated to Twitter Bootstrap 3.0  .nav-header should be change to .menu-header  .menu property \"hidden\" should be changed to \"collapsed\"   0.2   Replace header tag  div class=\"header-fa-container helpdesk\"  with  div class=\"header-icon\" /div . The image to show will sort itself out.  Place any images you may need in the root folder \"resources\" or a subdirectory of it  Invoke old-school apps with the binding \"appInvoke\"  Remove div with id #header-info and add class .info-links to the list of info links in the header  Remove div with id #content-container", 
            "title": "Changelog"
        }, 
        {
            "loc": "/technicalPlatform/", 
            "tags": "", 
            "text": "Technical\nIncluded javascript frameworks\nThe bundled library contains:\n\njQuery\nUnderscore.js\nMoment.js\nKnockout.js\nBootstrap.js\n\nIcons\nFont awesome is include. Please see the font awesome documentation.\nStructure of the framework\nThe framework has the following file structure\n\napps - small selfdependent html apps that can be dynamically loaded into the Actionpads\n...\n\n\nSystem - READ ONLY! This is the base of the framework and should never be modified\nbin - launch Google Chrome in Allow Cross Origin mode\n\ncss\n\n\nlime.css - styling for the framework. Overrides several Twitter Bootstrap stylings\n\n\nfont-awesome.css\n\nbootstrap.css\nfont - Font files for Font awesome\n\n\n... \nimg - images used in the framework which aren't from Font Awesom\n\n\n...\njs - all javacript used in the framework\n\n\nlbs.js - Frameworks main javascript\n... Third party frameworks ...\nview - Views used by the system, for example the debug view\n\n\napplication.html\n\n\n\n\n\nThe core: lbs.js and it's modules\nlbs.js is the main file of the framework is mainly in charge of setup and delegating tasks. It uses the following modules to accually do stuff:\n   lbs.apploader.js - Handels the loading of the apps and their initiation \n   lbs.bindings.js - The custom knockout bindnings are defined here\n   lbs.loader.js  - Handels loading of scripts, views and styles. \n   lbs.log.js - Handels logging to the custom console.", 
            "title": "TechnicalPlatform"
        }, 
        {
            "loc": "/technicalPlatform#technical", 
            "tags": "", 
            "text": "", 
            "title": "Technical"
        }, 
        {
            "loc": "/technicalPlatform#included-javascript-frameworks", 
            "tags": "", 
            "text": "The bundled library contains:   jQuery  Underscore.js  Moment.js  Knockout.js  Bootstrap.js", 
            "title": "Included javascript frameworks"
        }, 
        {
            "loc": "/technicalPlatform#icons", 
            "tags": "", 
            "text": "Font awesome  is include. Please see the font awesome documentation.", 
            "title": "Icons"
        }, 
        {
            "loc": "/technicalPlatform#structure-of-the-framework", 
            "tags": "", 
            "text": "The framework has the following file structure   apps  -  small selfdependent html apps that can be dynamically loaded into the Actionpads  ...    System  -  READ ONLY! This is the base of the framework and should never be modified  bin  -  launch Google Chrome in Allow Cross Origin mode   css    lime.css -  styling for the framework. Overrides several Twitter Bootstrap stylings    font-awesome.css   bootstrap.css  font  -  Font files for Font awesome    ...   img  -  images used in the framework which aren't from Font Awesom    ...  js  -  all javacript used in the framework    lbs.js -  Frameworks main javascript  ... Third party frameworks ...  view  -  Views used by the system, for example the debug view    application.html", 
            "title": "Structure of the framework"
        }, 
        {
            "loc": "/technicalPlatform#the-core-lbsjs-and-its-modules", 
            "tags": "", 
            "text": "lbs.js is the main file of the framework is mainly in charge of setup and delegating tasks. It uses the following modules to accually do stuff:     lbs.apploader.js  - Handels the loading of the apps and their initiation      lbs.bindings.js  - The custom knockout bindnings are defined here     lbs.loader.js   - Handels loading of scripts, views and styles.      lbs.log.js  - Handels logging to the custom console.", 
            "title": "The core: lbs.js and it's modules"
        }, 
        {
            "loc": "/python/", 
            "tags": "", 
            "text": "Install and configure python\nSome help on making python work on windows.\nHelper scripts\nIn the folder \"PythonHelpers\" where are a few helpers to make the process easier.\nThe script collection is refered to as $pyh.\nInstall python\nopen cmd and run $pyh/Install.bat. This will:\n\nInstall python 2 and 3\nInstall pip\nInstall virutalenvironment\nInstall virtualenvironmentWrapper\n\nWoring with virtual environment\nCreate environment\nopen cmd and run $pyh/CreateEnvironment.bat.\nIt takes 3 parameters.\n\nPython version 2/3\nName of environment\nPath to project files\n\nThis will install an set everything up.\nActivate virtual environment\nworkon [name]\nDeactive virtual environment\ndeactivate\nInstall dependecies\npip install -r requirements.txt\nSetup environment variables\nTo set environment variables such as github credentials. Create a file named\n.env in the prject root and list key-value pairs as\nKEY=VAL\nAlso add key \"PYTHONUNBUFFERED=true\" for immeiate console output\nExample\nPYTHONUNBUFFERED=true\nGITHUB_USER=xxx\nGITHUB_PASSWORD=yyy\n\nStarting webproject for services\nhoncho start\nChange forman version (optional)\nIf using foreman yo will have to us v.0.61. It is hpwever recomended to use honcho instead.\n\"gem install foreman\" installed v0.63, which does not work for \"foreman start\"\ngem uninstall foreman\ngem install foreman -v 0.61\nWorking with heroku (optional)\nThe service and documentation platform is hosted on heroku.\nIf you are to be working with heroku you may have to install the toolbelt.\nMake sure to install into a path without spaces. Standard path may not work.\nhttps://toolbelt.heroku.com/windows\n\nPublish to heroku using git\nPublishing to heroku is done by commiting to a specific git repo.\nSetup the heroku repos as remotes to you local repo\nheroku git:remote -a limebootstrapservices -r heroku\nheroku git:remote -a limebootstrapservices-dev -r heroku-dev\n\nSend keys of you have not alread done so\nheroku keys:add\n\nPublish to heroku\ngit push heroku-dev master\n\nto publish from another branch then master use\ngit push heroku-dev my branch:master\n\nCheck the logs\nheroku logs --app limebootstrapservices-dev\n\nEnvironments real addresses are located on the following urls, production is alias under limebootstrap.lundalogik.se.\nhttp://limebootstrapservices.herokuapp.com/\nhttp://limebootstrapservices-dev.herokuapp.com/\n\nSome environment variables will have to be present on both environments similar to en .env file on local enviroment.\nheroku config:set GITHUB_USER=xxx --app limebootstrapservices-dev\nheroku config:set GITHUB_PASSWORD=yyy --app limebootstrapservices-dev\n\nInstall ruby from standard source\nRuby that is included in heroku does not work in some casess\nhttp://rubyinstaller.org/downloads/\nAdd ruby environment path\n[Environment]::SetEnvironmentVariable(Path, $env:Path;C:\\Ruby200\\bin\\, Machine)\n\n\nWorking with powershell (optional)\nAdd python environment path.\nSet path as administrator and set it for whole machine\n[Environment]::SetEnvironmentVariable(Path, $env:Path;C:\\Python33\\;C:\\Python33\\Scripts\\, Machine)\n\n\nChange powershell executionpolicy\nSet-ExecutionPolicy Unrestricted", 
            "title": "Python - Installation and configuration"
        }, 
        {
            "loc": "/python#install-and-configure-python", 
            "tags": "", 
            "text": "Some help on making python work on windows.", 
            "title": "Install and configure python"
        }, 
        {
            "loc": "/python#helper-scripts", 
            "tags": "", 
            "text": "In the folder \"PythonHelpers\" where are a few helpers to make the process easier.\nThe script collection is refered to as  $pyh .", 
            "title": "Helper scripts"
        }, 
        {
            "loc": "/python#install-python", 
            "tags": "", 
            "text": "open cmd and run  $pyh/Install.bat . This will:   Install python 2 and 3  Install pip  Install virutalenvironment  Install virtualenvironmentWrapper", 
            "title": "Install python"
        }, 
        {
            "loc": "/python#woring-with-virtual-environment", 
            "tags": "", 
            "text": "Create environment  open cmd and run  $pyh/CreateEnvironment.bat .  It takes 3 parameters.   Python version 2/3  Name of environment  Path to project files   This will install an set everything up.  Activate virtual environment  workon [ name ]  Deactive virtual environment  deactivate  Install dependecies  pip install -r requirements.txt", 
            "title": "Woring with virtual environment"
        }, 
        {
            "loc": "/python#setup-environment-variables", 
            "tags": "", 
            "text": "To set environment variables such as github credentials. Create a file named .env  in the prject root and list key-value pairs as KEY=VAL  Also add key \"PYTHONUNBUFFERED=true\" for immeiate console output  Example  PYTHONUNBUFFERED=true\nGITHUB_USER=xxx\nGITHUB_PASSWORD=yyy", 
            "title": "Setup environment variables"
        }, 
        {
            "loc": "/python#starting-webproject-for-services", 
            "tags": "", 
            "text": "honcho start", 
            "title": "Starting webproject for services"
        }, 
        {
            "loc": "/python#change-forman-version-optional", 
            "tags": "", 
            "text": "If using foreman yo will have to us v.0.61. It is hpwever recomended to use  honcho  instead.  \"gem install foreman\" installed v0.63, which does not work for \"foreman start\"  gem uninstall foreman  gem install foreman -v 0.61", 
            "title": "Change forman version (optional)"
        }, 
        {
            "loc": "/python#working-with-heroku-optional", 
            "tags": "", 
            "text": "The service and documentation platform is hosted on heroku.\nIf you are to be working with heroku you may have to install the toolbelt.\nMake sure to install into a path without spaces. Standard path may not work.  https://toolbelt.heroku.com/windows  Publish to heroku using git  Publishing to heroku is done by commiting to a specific git repo.  Setup the heroku repos as remotes to you local repo  heroku git:remote -a limebootstrapservices -r heroku\nheroku git:remote -a limebootstrapservices-dev -r heroku-dev  Send keys of you have not alread done so  heroku keys:add  Publish to heroku  git push heroku-dev master  to publish from another branch then master use  git push heroku-dev  my branch :master  Check the logs  heroku logs --app limebootstrapservices-dev  Environments real addresses are located on the following urls, production is alias under  limebootstrap.lundalogik.se .  http://limebootstrapservices.herokuapp.com/\nhttp://limebootstrapservices-dev.herokuapp.com/  Some environment variables will have to be present on both environments similar to en  .env  file on local enviroment.  heroku config:set GITHUB_USER=xxx --app limebootstrapservices-dev\nheroku config:set GITHUB_PASSWORD=yyy --app limebootstrapservices-dev  Install ruby from standard source  Ruby that is included in heroku does not work in some casess http://rubyinstaller.org/downloads/  Add ruby environment path  [Environment]::SetEnvironmentVariable( Path ,  $env:Path;C:\\Ruby200\\bin\\ ,  Machine )", 
            "title": "Working with heroku (optional)"
        }, 
        {
            "loc": "/python#working-with-powershell-optional", 
            "tags": "", 
            "text": "Add python environment path.\nSet path as administrator and set it for whole machine  [Environment]::SetEnvironmentVariable( Path ,  $env:Path;C:\\Python33\\;C:\\Python33\\Scripts\\ ,  Machine )  Change powershell executionpolicy  Set-ExecutionPolicy Unrestricted", 
            "title": "Working with powershell (optional)"
        }
    ]
}